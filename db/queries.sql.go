// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const getCaseByUIDOnDate = `-- name: GetCaseByUIDOnDate :one
SELECT last_update, confirmed, deaths, recovered, active, incident_rate, people_tested, people_hospitalized, mortality_rate, uid, testing_rate, hospitalization_rate, created_at FROM covid_usa.cases_by_date
WHERE uid = $1 AND "created_at" = $2
`

type GetCaseByUIDOnDateParams struct {
	Uid       int64
	CreatedAt time.Time
}

func (q *Queries) GetCaseByUIDOnDate(ctx context.Context, arg GetCaseByUIDOnDateParams) (CovidUsaCasesByDate, error) {
	row := q.db.QueryRowContext(ctx, getCaseByUIDOnDate, arg.Uid, arg.CreatedAt)
	var i CovidUsaCasesByDate
	err := row.Scan(
		&i.LastUpdate,
		&i.Confirmed,
		&i.Deaths,
		&i.Recovered,
		&i.Active,
		&i.IncidentRate,
		&i.PeopleTested,
		&i.PeopleHospitalized,
		&i.MortalityRate,
		&i.Uid,
		&i.TestingRate,
		&i.HospitalizationRate,
		&i.CreatedAt,
	)
	return i, err
}

const getCases = `-- name: GetCases :many
SELECT last_update, confirmed, deaths, recovered, active, incident_rate, people_tested, people_hospitalized, mortality_rate, uid, testing_rate, hospitalization_rate, created_at FROM covid_usa.cases_by_date
`

func (q *Queries) GetCases(ctx context.Context) ([]CovidUsaCasesByDate, error) {
	rows, err := q.db.QueryContext(ctx, getCases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CovidUsaCasesByDate
	for rows.Next() {
		var i CovidUsaCasesByDate
		if err := rows.Scan(
			&i.LastUpdate,
			&i.Confirmed,
			&i.Deaths,
			&i.Recovered,
			&i.Active,
			&i.IncidentRate,
			&i.PeopleTested,
			&i.PeopleHospitalized,
			&i.MortalityRate,
			&i.Uid,
			&i.TestingRate,
			&i.HospitalizationRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCasesByDate = `-- name: GetCasesByDate :many
SELECT last_update, confirmed, deaths, recovered, active, incident_rate, people_tested, people_hospitalized, mortality_rate, uid, testing_rate, hospitalization_rate, created_at FROM covid_usa.cases_by_date
WHERE "created_at" = $1
`

func (q *Queries) GetCasesByDate(ctx context.Context, createdAt time.Time) ([]CovidUsaCasesByDate, error) {
	rows, err := q.db.QueryContext(ctx, getCasesByDate, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CovidUsaCasesByDate
	for rows.Next() {
		var i CovidUsaCasesByDate
		if err := rows.Scan(
			&i.LastUpdate,
			&i.Confirmed,
			&i.Deaths,
			&i.Recovered,
			&i.Active,
			&i.IncidentRate,
			&i.PeopleTested,
			&i.PeopleHospitalized,
			&i.MortalityRate,
			&i.Uid,
			&i.TestingRate,
			&i.HospitalizationRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCasesByState = `-- name: GetCasesByState :many
SELECT c.last_update, c.confirmed, c.deaths, c.recovered, c.active, c.incident_rate, c.people_tested, c.people_hospitalized, c.mortality_rate, c.uid, c.testing_rate, c.hospitalization_rate, c.created_at FROM covid_usa.cases_by_date c
LEFT JOIN covid_usa.locations l on l.uid = c.uid
WHERE l."province_state" = $1
`

func (q *Queries) GetCasesByState(ctx context.Context, provinceState sql.NullString) ([]CovidUsaCasesByDate, error) {
	rows, err := q.db.QueryContext(ctx, getCasesByState, provinceState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CovidUsaCasesByDate
	for rows.Next() {
		var i CovidUsaCasesByDate
		if err := rows.Scan(
			&i.LastUpdate,
			&i.Confirmed,
			&i.Deaths,
			&i.Recovered,
			&i.Active,
			&i.IncidentRate,
			&i.PeopleTested,
			&i.PeopleHospitalized,
			&i.MortalityRate,
			&i.Uid,
			&i.TestingRate,
			&i.HospitalizationRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCasesByUID = `-- name: GetCasesByUID :many
SELECT last_update, confirmed, deaths, recovered, active, incident_rate, people_tested, people_hospitalized, mortality_rate, uid, testing_rate, hospitalization_rate, created_at FROM covid_usa.cases_by_date
WHERE uid = $1
`

func (q *Queries) GetCasesByUID(ctx context.Context, uid int64) ([]CovidUsaCasesByDate, error) {
	rows, err := q.db.QueryContext(ctx, getCasesByUID, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CovidUsaCasesByDate
	for rows.Next() {
		var i CovidUsaCasesByDate
		if err := rows.Scan(
			&i.LastUpdate,
			&i.Confirmed,
			&i.Deaths,
			&i.Recovered,
			&i.Active,
			&i.IncidentRate,
			&i.PeopleTested,
			&i.PeopleHospitalized,
			&i.MortalityRate,
			&i.Uid,
			&i.TestingRate,
			&i.HospitalizationRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCasesByUIDSinceDate = `-- name: GetCasesByUIDSinceDate :many
SELECT last_update, confirmed, deaths, recovered, active, incident_rate, people_tested, people_hospitalized, mortality_rate, uid, testing_rate, hospitalization_rate, created_at FROM covid_usa.cases_by_date
WHERE uid = $1 AND "created_at" >= $2
`

type GetCasesByUIDSinceDateParams struct {
	Uid       int64
	CreatedAt time.Time
}

func (q *Queries) GetCasesByUIDSinceDate(ctx context.Context, arg GetCasesByUIDSinceDateParams) ([]CovidUsaCasesByDate, error) {
	rows, err := q.db.QueryContext(ctx, getCasesByUIDSinceDate, arg.Uid, arg.CreatedAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CovidUsaCasesByDate
	for rows.Next() {
		var i CovidUsaCasesByDate
		if err := rows.Scan(
			&i.LastUpdate,
			&i.Confirmed,
			&i.Deaths,
			&i.Recovered,
			&i.Active,
			&i.IncidentRate,
			&i.PeopleTested,
			&i.PeopleHospitalized,
			&i.MortalityRate,
			&i.Uid,
			&i.TestingRate,
			&i.HospitalizationRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCasesSinceDate = `-- name: GetCasesSinceDate :many
SELECT last_update, confirmed, deaths, recovered, active, incident_rate, people_tested, people_hospitalized, mortality_rate, uid, testing_rate, hospitalization_rate, created_at FROM covid_usa.cases_by_date
WHERE "created_at" >= $1
`

func (q *Queries) GetCasesSinceDate(ctx context.Context, createdAt time.Time) ([]CovidUsaCasesByDate, error) {
	rows, err := q.db.QueryContext(ctx, getCasesSinceDate, createdAt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CovidUsaCasesByDate
	for rows.Next() {
		var i CovidUsaCasesByDate
		if err := rows.Scan(
			&i.LastUpdate,
			&i.Confirmed,
			&i.Deaths,
			&i.Recovered,
			&i.Active,
			&i.IncidentRate,
			&i.PeopleTested,
			&i.PeopleHospitalized,
			&i.MortalityRate,
			&i.Uid,
			&i.TestingRate,
			&i.HospitalizationRate,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationByName = `-- name: GetLocationByName :many
SELECT uid, iso2, iso3, code3, fips, admin2, province_state, country_region, lat, long_, combined_key, population FROM covid_usa.locations
WHERE "province_state" = $1
`

func (q *Queries) GetLocationByName(ctx context.Context, provinceState sql.NullString) ([]CovidUsaLocation, error) {
	rows, err := q.db.QueryContext(ctx, getLocationByName, provinceState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CovidUsaLocation
	for rows.Next() {
		var i CovidUsaLocation
		if err := rows.Scan(
			&i.Uid,
			&i.Iso2,
			&i.Iso3,
			&i.Code3,
			&i.Fips,
			&i.Admin2,
			&i.ProvinceState,
			&i.CountryRegion,
			&i.Lat,
			&i.Long,
			&i.CombinedKey,
			&i.Population,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLocationByUID = `-- name: GetLocationByUID :one
SELECT uid, iso2, iso3, code3, fips, admin2, province_state, country_region, lat, long_, combined_key, population FROM covid_usa.locations
WHERE uid = $1
`

func (q *Queries) GetLocationByUID(ctx context.Context, uid int64) (CovidUsaLocation, error) {
	row := q.db.QueryRowContext(ctx, getLocationByUID, uid)
	var i CovidUsaLocation
	err := row.Scan(
		&i.Uid,
		&i.Iso2,
		&i.Iso3,
		&i.Code3,
		&i.Fips,
		&i.Admin2,
		&i.ProvinceState,
		&i.CountryRegion,
		&i.Lat,
		&i.Long,
		&i.CombinedKey,
		&i.Population,
	)
	return i, err
}

const getLocations = `-- name: GetLocations :many
SELECT uid, iso2, iso3, code3, fips, admin2, province_state, country_region, lat, long_, combined_key, population FROM covid_usa.locations
`

func (q *Queries) GetLocations(ctx context.Context) ([]CovidUsaLocation, error) {
	rows, err := q.db.QueryContext(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CovidUsaLocation
	for rows.Next() {
		var i CovidUsaLocation
		if err := rows.Scan(
			&i.Uid,
			&i.Iso2,
			&i.Iso3,
			&i.Code3,
			&i.Fips,
			&i.Admin2,
			&i.ProvinceState,
			&i.CountryRegion,
			&i.Lat,
			&i.Long,
			&i.CombinedKey,
			&i.Population,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
